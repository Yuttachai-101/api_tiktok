/*
tiktok shop openapi

Testing AffiliateSellerV202412APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_AffiliateSellerV202412APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversationConversationIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversationConversationIdMessagesGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversationsConversationIdMessagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversationsConversationIdMessagesPost(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversationsMessagesListNewestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversationsMessagesListNewestGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412ConversatonsReadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412ConversatonsReadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412OpenCollaborationsCreatorContentDetailsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412OpenCollaborationsCreatorContentDetailsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412OpenCollaborationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412OpenCollaborationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412OpenCollaborationsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412OpenCollaborationsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202412APIService AffiliateSeller202412TargetCollaborationsTargetCollaborationIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetCollaborationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202412API.AffiliateSeller202412TargetCollaborationsTargetCollaborationIdGet(context.Background(), targetCollaborationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
