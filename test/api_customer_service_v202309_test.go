/*
tiktok shop openapi

Testing CustomerServiceV202309APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_CustomerServiceV202309APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomerServiceV202309APIService CustomerService202309AgentsSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309AgentsSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309AgentsSettingsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309AgentsSettingsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ConversationsConversationIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ConversationsConversationIdMessagesGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ConversationsConversationIdMessagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ConversationsConversationIdMessagesPost(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ConversationsConversationIdMessagesReadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ConversationsConversationIdMessagesReadPost(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ConversationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ConversationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ConversationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerServiceV202309APIService CustomerService202309ImagesUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerServiceV202309API.CustomerService202309ImagesUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
