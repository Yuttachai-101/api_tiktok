/*
tiktok shop openapi

Testing AffiliateSellerV202409APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_AffiliateSellerV202409APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409OpenCollaborationSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409OpenCollaborationSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409OpenCollaborationsProductsProductIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409OpenCollaborationsProductsProductIdDelete(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409OpenCollaborationsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409OpenCollaborationsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409SampleApplicationsApplicationIdFulfillmentsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409SampleApplicationsApplicationIdFulfillmentsSearchPost(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409SampleApplicationsApplicationIdReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var applicationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409SampleApplicationsApplicationIdReviewPost(context.Background(), applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409SampleApplicationsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409SampleApplicationsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409TargetCollaborationsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409TargetCollaborationsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409TargetCollaborationsTargetCollaborationIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetCollaborationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409TargetCollaborationsTargetCollaborationIdDelete(context.Background(), targetCollaborationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409TargetCollaborationsTargetCollaborationIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetCollaborationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409TargetCollaborationsTargetCollaborationIdGet(context.Background(), targetCollaborationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202409APIService AffiliateSeller202409TargetCollaborationsTargetCollaborationIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetCollaborationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202409API.AffiliateSeller202409TargetCollaborationsTargetCollaborationIdPut(context.Background(), targetCollaborationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
