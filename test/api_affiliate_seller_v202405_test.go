/*
tiktok shop openapi

Testing AffiliateSellerV202405APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk_golang

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "tiktokshop/open/sdk_golang/apis"
)

func Test_sdk_golang_AffiliateSellerV202405APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405OpenCollaborationSettingsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405OpenCollaborationSettingsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405OpenCollaborationsOpenCollaborationIdRemoveCreatorPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var openCollaborationId string

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405OpenCollaborationsOpenCollaborationIdRemoveCreatorPost(context.Background(), openCollaborationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405OpenCollaborationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405OpenCollaborationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405OpenCollaborationsProductsSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405OpenCollaborationsProductsSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405OrdersSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405OrdersSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405ProductsProductIdPromotionLinkGeneratePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productId string

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405ProductsProductIdPromotionLinkGeneratePost(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AffiliateSellerV202405APIService AffiliateSeller202405TargetCollaborationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AffiliateSellerV202405API.AffiliateSeller202405TargetCollaborationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
