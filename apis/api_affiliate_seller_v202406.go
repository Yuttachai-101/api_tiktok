/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "github.com/Yuttachai-101/api_tiktok/models/affiliate_seller/v202406"
)


// AffiliateSellerV202406APIService AffiliateSellerV202406API service
type AffiliateSellerV202406APIService service

type ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest struct {
    ctx context.Context
    ApiService *AffiliateSellerV202406APIService
    creatorUserId string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// 
func (r ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest) ContentType(contentType string) ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest) ShopCipher(shopCipher string) ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest) Execute() (*affiliate_seller_v202406.AffiliateSeller202406GetMarketplaceCreatorPerformanceResponse, *http.Response, error) {
    return r.ApiService.AffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetExecute(r)
}

/*
AffiliateSeller202406MarketplaceCreatorsCreatorUserIdGet GetMarketplaceCreatorPerformance
Get the Creator Affiliate's Marketplace information and performance metrics in the last 30 days. 

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param creatorUserId Creators' TikTok User ID
@return ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest
*/
func (a *AffiliateSellerV202406APIService) AffiliateSeller202406MarketplaceCreatorsCreatorUserIdGet(ctx context.Context, creatorUserId string) ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest {
    return ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest{
        ApiService: a,
        ctx: ctx,
        creatorUserId: creatorUserId,
    }
}

// Execute executes the request
//  @return AffiliateSeller202406GetMarketplaceCreatorPerformanceResponse
func (a *AffiliateSellerV202406APIService) AffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetExecute(r ApiAffiliateSeller202406MarketplaceCreatorsCreatorUserIdGetRequest) (*affiliate_seller_v202406.AffiliateSeller202406GetMarketplaceCreatorPerformanceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_seller_v202406.AffiliateSeller202406GetMarketplaceCreatorPerformanceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateSellerV202406APIService.AffiliateSeller202406MarketplaceCreatorsCreatorUserIdGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_seller/202406/marketplace_creators/{creator_user_id}"
    localVarPath = strings.Replace(localVarPath, "{"+"creator_user_id"+"}", url.PathEscape(parameterValueToString(r.creatorUserId, "creatorUserId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateSellerV202406APIService
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    shopCipher *string
    affiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody *affiliate_seller_v202406.AffiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody
}

// The value of \&quot;page_size\&quot; must be 12 or 20
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) PageSize(pageSize int64) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) ContentType(contentType string) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Pagination offset determines where you begin to search for. It&#39;s empty when raise your first request
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) PageToken(pageToken string) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// 
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) ShopCipher(shopCipher string) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) AffiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody(affiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody affiliate_seller_v202406.AffiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    r.affiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody = &affiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody
    return r
}
func (r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) Execute() (*affiliate_seller_v202406.AffiliateSeller202406SellerSearchCreatoronMarketplaceResponse, *http.Response, error) {
    return r.ApiService.AffiliateSeller202406MarketplaceCreatorsSearchPostExecute(r)
}

/*
AffiliateSeller202406MarketplaceCreatorsSearchPost SellerSearchCreatoronMarketplace
This API is used by Sellers to search for Creators in the Creator Marketplace. Sellers can search based on filters such as GMV, keywords, and Creator follower demographics. All the data returned is for the last 30 days.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest
*/
func (a *AffiliateSellerV202406APIService) AffiliateSeller202406MarketplaceCreatorsSearchPost(ctx context.Context) ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest {
    return ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateSeller202406SellerSearchCreatoronMarketplaceResponse
func (a *AffiliateSellerV202406APIService) AffiliateSeller202406MarketplaceCreatorsSearchPostExecute(r ApiAffiliateSeller202406MarketplaceCreatorsSearchPostRequest) (*affiliate_seller_v202406.AffiliateSeller202406SellerSearchCreatoronMarketplaceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_seller_v202406.AffiliateSeller202406SellerSearchCreatoronMarketplaceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateSellerV202406APIService.AffiliateSeller202406MarketplaceCreatorsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_seller/202406/marketplace_creators/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateSeller202406SellerSearchCreatoronMarketplaceRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
