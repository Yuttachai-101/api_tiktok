/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/customer_service/v202407"
)


// CustomerServiceV202407APIService CustomerServiceV202407API service
type CustomerServiceV202407APIService service

type ApiCustomerService202407PerformanceGetRequest struct {
    ctx context.Context
    ApiService *CustomerServiceV202407APIService
    supportDateGe *string
    supportDateLt *string
    xTtsAccessToken *string
    contentType *string
    shopCipher *string
}

// The start date (YYYY-MM-DD) of the period for selecting chat support sessions to be included in the performance evaluation.
func (r ApiCustomerService202407PerformanceGetRequest) SupportDateGe(supportDateGe string) ApiCustomerService202407PerformanceGetRequest {
    r.supportDateGe = &supportDateGe
    return r
}
// The end date (YYYY-MM-DD) of the period for selecting chat support sessions to be included in the performance evaluation.
func (r ApiCustomerService202407PerformanceGetRequest) SupportDateLt(supportDateLt string) ApiCustomerService202407PerformanceGetRequest {
    r.supportDateLt = &supportDateLt
    return r
}
// 
func (r ApiCustomerService202407PerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiCustomerService202407PerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiCustomerService202407PerformanceGetRequest) ContentType(contentType string) ApiCustomerService202407PerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// 
func (r ApiCustomerService202407PerformanceGetRequest) ShopCipher(shopCipher string) ApiCustomerService202407PerformanceGetRequest {
    r.shopCipher = &shopCipher
    return r
}
func (r ApiCustomerService202407PerformanceGetRequest) Execute() (*customer_service_v202407.CustomerService202407GetCustomerServicePerformanceResponse, *http.Response, error) {
    return r.ApiService.CustomerService202407PerformanceGetExecute(r)
}

/*
CustomerService202407PerformanceGet GetCustomerServicePerformance
Get the average customer service performance of a shop for a selected time period

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiCustomerService202407PerformanceGetRequest
*/
func (a *CustomerServiceV202407APIService) CustomerService202407PerformanceGet(ctx context.Context) ApiCustomerService202407PerformanceGetRequest {
    return ApiCustomerService202407PerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return CustomerService202407GetCustomerServicePerformanceResponse
func (a *CustomerServiceV202407APIService) CustomerService202407PerformanceGetExecute(r ApiCustomerService202407PerformanceGetRequest) (*customer_service_v202407.CustomerService202407GetCustomerServicePerformanceResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *customer_service_v202407.CustomerService202407GetCustomerServicePerformanceResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerServiceV202407APIService.CustomerService202407PerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/customer_service/202407/performance"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.supportDateGe == nil {
        return localVarReturnValue, nil, reportError("supportDateGe is required and must be specified")
    }
    if r.supportDateLt == nil {
        return localVarReturnValue, nil, reportError("supportDateLt is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "support_date_ge", r.supportDateGe, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "support_date_lt", r.supportDateLt, "")
    if r.shopCipher != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_cipher", r.shopCipher, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
