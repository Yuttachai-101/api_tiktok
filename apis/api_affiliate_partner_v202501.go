/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "tiktokshop/open/sdk_golang/models/affiliate_partner/v202501"
)


// AffiliatePartnerV202501APIService AffiliatePartnerV202501API service
type AffiliatePartnerV202501APIService service

type ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202501APIService
    campaignId string
    xTtsAccessToken *string
    contentType *string
    pageSize *int64
    pageToken *string
}

// 
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) ContentType(contentType string) ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// The number of results to be returned per page. Valid range: 1-50.
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) PageSize(pageSize int64) ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest {
    r.pageSize = &pageSize
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) PageToken(pageToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest {
    r.pageToken = &pageToken
    return r
}
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) Execute() (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetExecute(r)
}

/*
AffiliatePartner202501CampaignsCampaignIdProductsPerformanceGet GetAffiliateCampaignCreatorFulfillmentStatusList
This API offers the ability to get the product of the campaign fulfillment status for creators who added partner campaign products to their showcase. For details of a specified product involved in an affiliated campaign, use Get Affiliate Campaign Creator Fulfillment Status Info gateway.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId the unique id of a campaign
@return ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest
*/
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsPerformanceGet(ctx context.Context, campaignId string) ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest {
    return ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetExecute(r ApiAffiliatePartner202501CampaignsCampaignIdProductsPerformanceGetRequest) (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202501APIService.AffiliatePartner202501CampaignsCampaignIdProductsPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202501/campaigns/{campaign_id}/products/performance"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202501APIService
    campaignId string
    productId string
    creatorTempId string
    affiliateProductId *string
    xTtsAccessToken *string
    contentType2 *string
    contentType *string
}

// The affiliate product identifier to be included in the response. Refer to &#x60;promotion_creators.affiliate_product_id&#x60; in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) AffiliateProductId(affiliateProductId string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest {
    r.affiliateProductId = &affiliateProductId
    return r
}
// 
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) ContentType2(contentType2 string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest {
    r.contentType2 = &contentType2
    return r
}
// Content type.Identify content as video or live. - 1: VIDEO - 2: LIVE_ROOM
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) ContentType(contentType string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) Execute() (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetExecute(r)
}

/*
AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet GetAffiliateCampaignCreatorProductContentStatistics
Get statistics on creator's marketing video content 

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The campaign identifier.
@param productId The product identifier.
@param creatorTempId A time-limited identifier associated with the creator that is valid for one hour. This identifier is valid to retrieve content performance data associated with the creator. Refer to `promotion_creators.creator.creator_temp_id` in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
@return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest
*/
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet(ctx context.Context, campaignId string, productId string, creatorTempId string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest {
    return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
        productId: productId,
        creatorTempId: creatorTempId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetExecute(r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGetRequest) (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202501APIService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/creator/{creator_temp_id}/content/statistics"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"creator_temp_id"+"}", url.PathEscape(parameterValueToString(r.creatorTempId, "creatorTempId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.affiliateProductId == nil {
        return localVarReturnValue, nil, reportError("affiliateProductId is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType2 == nil {
        return localVarReturnValue, nil, reportError("contentType2 is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "affiliate_product_id", r.affiliateProductId, "")
    if r.contentType != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", r.contentType, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType2, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202501APIService
    campaignId string
    productId string
    creatorTempId string
    xTtsAccessToken *string
    contentType *string
}

// 
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest) ContentType(contentType string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest) Execute() (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetExecute(r)
}

/*
AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet GetAffiliateCampaignCreatorProductSampleStatus
Get progress on creator's sample status

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The campaign identifier.
@param productId The product identifier.
@param creatorTempId A time-limited identifier associated with the creator that is valid for one hour. This identifier is valid to retrieve content performance data associated with the creator.`promotion_creators.creator.creator_temp_id` in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
@return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest
*/
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet(ctx context.Context, campaignId string, productId string, creatorTempId string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest {
    return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
        productId: productId,
        creatorTempId: creatorTempId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetExecute(r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGetRequest) (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202501APIService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/creator/{creator_temp_id}/content/statistics/sample/status"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"creator_temp_id"+"}", url.PathEscape(parameterValueToString(r.creatorTempId, "creatorTempId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202501APIService
    campaignId string
    productId string
    xTtsAccessToken *string
    contentType *string
    pageSize *int64
    pageToken *string
}

// 
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) ContentType(contentType string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest {
    r.contentType = &contentType
    return r
}
// The number of results to be returned per page. Valid range: 1-50.
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) PageSize(pageSize int64) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest {
    r.pageSize = &pageSize
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) PageToken(pageToken string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest {
    r.pageToken = &pageToken
    return r
}
func (r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) Execute() (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetExecute(r)
}

/*
AffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGet GetAffiliateCampaignCreatorFulfillmentStatusInfo
This API offers the ability to get the product fulfillment status for creators who added partner campaign products to their showcase

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The campaign identifier.
@param productId The product identifier.
@return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest
*/
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGet(ctx context.Context, campaignId string, productId string) ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest {
    return ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
        productId: productId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse
func (a *AffiliatePartnerV202501APIService) AffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetExecute(r ApiAffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGetRequest) (*affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202501.AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202501APIService.AffiliatePartner202501CampaignsCampaignIdProductsProductIdPerformanceGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/performance"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
