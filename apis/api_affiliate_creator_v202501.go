/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "github.com/Yuttachai-101/api_tiktok/models/affiliate_creator/v202501"
)


// AffiliateCreatorV202501APIService AffiliateCreatorV202501API service
type AffiliateCreatorV202501APIService service

type ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202501APIService
    xTtsAccessToken *string
    contentType *string
    affiliateCreator202501GenerateAffiliateSharingLinkRequestBody *affiliate_creator_v202501.AffiliateCreator202501GenerateAffiliateSharingLinkRequestBody
}

// 
func (r ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest) ContentType(contentType string) ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest) AffiliateCreator202501GenerateAffiliateSharingLinkRequestBody(affiliateCreator202501GenerateAffiliateSharingLinkRequestBody affiliate_creator_v202501.AffiliateCreator202501GenerateAffiliateSharingLinkRequestBody) ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest {
    r.affiliateCreator202501GenerateAffiliateSharingLinkRequestBody = &affiliateCreator202501GenerateAffiliateSharingLinkRequestBody
    return r
}
func (r ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest) Execute() (*affiliate_creator_v202501.AffiliateCreator202501GenerateAffiliateSharingLinkResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202501AffiliateSharingLinksGenerateBatchPostExecute(r)
}

/*
AffiliateCreator202501AffiliateSharingLinksGenerateBatchPost GenerateAffiliateSharingLink
Use externally input material id, distributor customized tags, promotion channel and other needed parameters to generate affiliate share link, which contains chain keys.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest
*/
func (a *AffiliateCreatorV202501APIService) AffiliateCreator202501AffiliateSharingLinksGenerateBatchPost(ctx context.Context) ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest {
    return ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202501GenerateAffiliateSharingLinkResponse
func (a *AffiliateCreatorV202501APIService) AffiliateCreator202501AffiliateSharingLinksGenerateBatchPostExecute(r ApiAffiliateCreator202501AffiliateSharingLinksGenerateBatchPostRequest) (*affiliate_creator_v202501.AffiliateCreator202501GenerateAffiliateSharingLinkResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202501.AffiliateCreator202501GenerateAffiliateSharingLinkResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202501APIService.AffiliateCreator202501AffiliateSharingLinksGenerateBatchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202501/affiliate_sharing_links/generate_batch"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202501GenerateAffiliateSharingLinkRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202501SelectionProductsSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202501APIService
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    pageSize *int32
    affiliateCreator202501CreatorSelectAffiliateProductRequestBody *affiliate_creator_v202501.AffiliateCreator202501CreatorSelectAffiliateProductRequestBody
}

// 
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) ContentType(contentType string) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Pagination offset determines where you begin to search for. It&#39;s empty when raise your first request.
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) PageToken(pageToken string) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// The value of \&quot;page_size\&quot; must be greater than 0 and less than or equal to 50.
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) PageSize(pageSize int32) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) AffiliateCreator202501CreatorSelectAffiliateProductRequestBody(affiliateCreator202501CreatorSelectAffiliateProductRequestBody affiliate_creator_v202501.AffiliateCreator202501CreatorSelectAffiliateProductRequestBody) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    r.affiliateCreator202501CreatorSelectAffiliateProductRequestBody = &affiliateCreator202501CreatorSelectAffiliateProductRequestBody
    return r
}
func (r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) Execute() (*affiliate_creator_v202501.AffiliateCreator202501CreatorSelectAffiliateProductResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202501SelectionProductsSearchPostExecute(r)
}

/*
AffiliateCreator202501SelectionProductsSearchPost CreatorSelectAffiliateProduct
As a creator, you can use this API to filter products using various conditions.
When no filter parameter is given, the API will return affiliate products recommended by algorithm with no specific limits.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202501SelectionProductsSearchPostRequest
*/
func (a *AffiliateCreatorV202501APIService) AffiliateCreator202501SelectionProductsSearchPost(ctx context.Context) ApiAffiliateCreator202501SelectionProductsSearchPostRequest {
    return ApiAffiliateCreator202501SelectionProductsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202501CreatorSelectAffiliateProductResponse
func (a *AffiliateCreatorV202501APIService) AffiliateCreator202501SelectionProductsSearchPostExecute(r ApiAffiliateCreator202501SelectionProductsSearchPostRequest) (*affiliate_creator_v202501.AffiliateCreator202501CreatorSelectAffiliateProductResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202501.AffiliateCreator202501CreatorSelectAffiliateProductResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202501APIService.AffiliateCreator202501SelectionProductsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202501/selection/products/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202501CreatorSelectAffiliateProductRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
