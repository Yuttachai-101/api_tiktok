/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "github.com/Yuttachai-101/api_tiktok/models/affiliate_creator/v202412"
)


// AffiliateCreatorV202412APIService AffiliateCreatorV202412API service
type AffiliateCreatorV202412APIService service

type ApiAffiliateCreator202412SampleApplicationsSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202412APIService
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    pageSize *int32
    affiliateCreator202412SearchCreatorSampleApplicationsRequestBody *affiliate_creator_v202412.AffiliateCreator202412SearchCreatorSampleApplicationsRequestBody
}

// 
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) ContentType(contentType string) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Pagination offset determines where you begin to search for. It&#39;s empty when raise your first request.
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) PageToken(pageToken string) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// The value of \&quot;page_size\&quot; must be greater than 0 and less than or equal to 50. Default 20
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) PageSize(pageSize int32) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) AffiliateCreator202412SearchCreatorSampleApplicationsRequestBody(affiliateCreator202412SearchCreatorSampleApplicationsRequestBody affiliate_creator_v202412.AffiliateCreator202412SearchCreatorSampleApplicationsRequestBody) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    r.affiliateCreator202412SearchCreatorSampleApplicationsRequestBody = &affiliateCreator202412SearchCreatorSampleApplicationsRequestBody
    return r
}
func (r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) Execute() (*affiliate_creator_v202412.AffiliateCreator202412SearchCreatorSampleApplicationsResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202412SampleApplicationsSearchPostExecute(r)
}

/*
AffiliateCreator202412SampleApplicationsSearchPost SearchCreatorSampleApplications
Get sample application list of creator.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202412SampleApplicationsSearchPostRequest
*/
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SampleApplicationsSearchPost(ctx context.Context) ApiAffiliateCreator202412SampleApplicationsSearchPostRequest {
    return ApiAffiliateCreator202412SampleApplicationsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202412SearchCreatorSampleApplicationsResponse
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SampleApplicationsSearchPostExecute(r ApiAffiliateCreator202412SampleApplicationsSearchPostRequest) (*affiliate_creator_v202412.AffiliateCreator202412SearchCreatorSampleApplicationsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202412.AffiliateCreator202412SearchCreatorSampleApplicationsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202412APIService.AffiliateCreator202412SampleApplicationsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202412/sample_applications/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.pageSize != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202412SearchCreatorSampleApplicationsRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202412APIService
    xTtsAccessToken *string
    contentType *string
    affiliateCreator202412GetCreatorSampleApplicationDetailRequestBody *affiliate_creator_v202412.AffiliateCreator202412GetCreatorSampleApplicationDetailRequestBody
}

// 
func (r ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest) ContentType(contentType string) ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest) AffiliateCreator202412GetCreatorSampleApplicationDetailRequestBody(affiliateCreator202412GetCreatorSampleApplicationDetailRequestBody affiliate_creator_v202412.AffiliateCreator202412GetCreatorSampleApplicationDetailRequestBody) ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest {
    r.affiliateCreator202412GetCreatorSampleApplicationDetailRequestBody = &affiliateCreator202412GetCreatorSampleApplicationDetailRequestBody
    return r
}
func (r ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest) Execute() (*affiliate_creator_v202412.AffiliateCreator202412GetCreatorSampleApplicationDetailResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202412SampleApplicationsSingleQueryPostExecute(r)
}

/*
AffiliateCreator202412SampleApplicationsSingleQueryPost GetCreatorSampleApplicationDetail
Get the sample detail of specified sample application.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest
*/
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SampleApplicationsSingleQueryPost(ctx context.Context) ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest {
    return ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202412GetCreatorSampleApplicationDetailResponse
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SampleApplicationsSingleQueryPostExecute(r ApiAffiliateCreator202412SampleApplicationsSingleQueryPostRequest) (*affiliate_creator_v202412.AffiliateCreator202412GetCreatorSampleApplicationDetailResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202412.AffiliateCreator202412GetCreatorSampleApplicationDetailResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202412APIService.AffiliateCreator202412SampleApplicationsSingleQueryPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202412/sample_applications/single_query"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202412GetCreatorSampleApplicationDetailRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202412SamplesLabelsGetRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202412APIService
    productId *string
    xTtsAccessToken *string
    contentType *string
}

// The TikTok Shop product identifier.
func (r ApiAffiliateCreator202412SamplesLabelsGetRequest) ProductId(productId string) ApiAffiliateCreator202412SamplesLabelsGetRequest {
    r.productId = &productId
    return r
}
// 
func (r ApiAffiliateCreator202412SamplesLabelsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202412SamplesLabelsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202412SamplesLabelsGetRequest) ContentType(contentType string) ApiAffiliateCreator202412SamplesLabelsGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliateCreator202412SamplesLabelsGetRequest) Execute() (*affiliate_creator_v202412.AffiliateCreator202412GetCreatorApplicableSampleLabelResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202412SamplesLabelsGetExecute(r)
}

/*
AffiliateCreator202412SamplesLabelsGet GetCreatorApplicableSampleLabel
Check if a creator can apply for a sample of a specific product.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202412SamplesLabelsGetRequest
*/
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SamplesLabelsGet(ctx context.Context) ApiAffiliateCreator202412SamplesLabelsGetRequest {
    return ApiAffiliateCreator202412SamplesLabelsGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202412GetCreatorApplicableSampleLabelResponse
func (a *AffiliateCreatorV202412APIService) AffiliateCreator202412SamplesLabelsGetExecute(r ApiAffiliateCreator202412SamplesLabelsGetRequest) (*affiliate_creator_v202412.AffiliateCreator202412GetCreatorApplicableSampleLabelResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202412.AffiliateCreator202412GetCreatorApplicableSampleLabelResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202412APIService.AffiliateCreator202412SamplesLabelsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202412/samples/labels"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.productId == nil {
        return localVarReturnValue, nil, reportError("productId is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "product_id", r.productId, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
