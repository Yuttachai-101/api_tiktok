/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"

    "tiktokshop/open/sdk_golang/models/affiliate_creator/v202405"
)


// AffiliateCreatorV202405APIService AffiliateCreatorV202405API service
type AffiliateCreatorV202405APIService service

type ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    sortField *string
    sortOrder *string
    affiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody *affiliate_creator_v202405.AffiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody
}

// The value of \&quot;page_size\&quot; must be greater than 0 and less than or equal to 20.
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) PageSize(pageSize int64) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) ContentType(contentType string) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// Pagination offset determines where you begin to search for. It&#39;s empty when raise your first request.
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) PageToken(pageToken string) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
// The returned results are sorted by the specified field.   Possible values: - commission_rate - product_sales_price - commission - units_sold  Specify the sort order using the &#x60;sort_order&#x60; parameter.  
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) SortField(sortField string) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.sortField = &sortField
    return r
}
// The sort order for the objects in the response. Default: ASC Possible values: - ASC: Ascending order - DESC: Descending order
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) SortOrder(sortOrder string) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.sortOrder = &sortOrder
    return r
}
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) AffiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody(affiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody affiliate_creator_v202405.AffiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    r.affiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody = &affiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody
    return r
}
func (r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405CreatorSearchOpenCollaborationProductResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405OpenCollaborationsProductsSearchPostExecute(r)
}

/*
AffiliateCreator202405OpenCollaborationsProductsSearchPost CreatorSearchOpenCollaborationProduct
This API is used to search the information of products with open collaboration by category, commission rate, and keywords. It will return all products on the TikTok Shop Affiliate Product Marketplace that are in an open collaboration.
Creators can only search for open collaboration within the regions they are registered in the affiliate.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405OpenCollaborationsProductsSearchPost(ctx context.Context) ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest {
    return ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405CreatorSearchOpenCollaborationProductResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405OpenCollaborationsProductsSearchPostExecute(r ApiAffiliateCreator202405OpenCollaborationsProductsSearchPostRequest) (*affiliate_creator_v202405.AffiliateCreator202405CreatorSearchOpenCollaborationProductResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405CreatorSearchOpenCollaborationProductResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405OpenCollaborationsProductsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/open_collaborations/products/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.sortField != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
    }
    if r.sortOrder != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "sort_order", r.sortOrder, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202405CreatorSearchOpenCollaborationProductRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202405OrdersSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    version *int32
    pageToken *string
}

// The value of \&quot;page_size\&quot; must be greater than 0 and less than or equal to 50.
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) PageSize(pageSize int64) ApiAffiliateCreator202405OrdersSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405OrdersSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) ContentType(contentType string) ApiAffiliateCreator202405OrdersSearchPostRequest {
    r.contentType = &contentType
    return r
}
// The interface version you want to access
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) Version(version int32) ApiAffiliateCreator202405OrdersSearchPostRequest {
    r.version = &version
    return r
}
// Pagination offset determines where you begin to search for. It&#39;s empty when raise your first request.
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) PageToken(pageToken string) ApiAffiliateCreator202405OrdersSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
func (r ApiAffiliateCreator202405OrdersSearchPostRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405SearchCreatorAffiliateOrdersResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405OrdersSearchPostExecute(r)
}

/*
AffiliateCreator202405OrdersSearchPost SearchCreatorAffiliateOrders
Search Creator Affiliate Orders
This API allows the partner to retrieve a list of affiliate orders generated by a creator, returning the order ID and the product ID. Using this, the partner can track their affiliate-conversions on behalf of a creator, using the order ID.
For now, this API returns all historical affiliate orders by a creator. We do not provide any filtering mechanisms (based on timestamp) at this time. We will provide this functionality in a future iteration. Thus this API is technically a "Get Affiliate Orders List" at this stage, but it will be improved in the future to be a search based API (with robust filtering).

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405OrdersSearchPostRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405OrdersSearchPost(ctx context.Context) ApiAffiliateCreator202405OrdersSearchPostRequest {
    return ApiAffiliateCreator202405OrdersSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405SearchCreatorAffiliateOrdersResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405OrdersSearchPostExecute(r ApiAffiliateCreator202405OrdersSearchPostRequest) (*affiliate_creator_v202405.AffiliateCreator202405SearchCreatorAffiliateOrdersResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405SearchCreatorAffiliateOrdersResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405OrdersSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/orders/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.version != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
    }
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202405ProfilesGetRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    xTtsAccessToken *string
    contentType *string
}

// 
func (r ApiAffiliateCreator202405ProfilesGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405ProfilesGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405ProfilesGetRequest) ContentType(contentType string) ApiAffiliateCreator202405ProfilesGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliateCreator202405ProfilesGetRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405GetCreatorProfileResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405ProfilesGetExecute(r)
}

/*
AffiliateCreator202405ProfilesGet GetCreatorProfile
This API gets the creator profile information.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405ProfilesGetRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ProfilesGet(ctx context.Context) ApiAffiliateCreator202405ProfilesGetRequest {
    return ApiAffiliateCreator202405ProfilesGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405GetCreatorProfileResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ProfilesGetExecute(r ApiAffiliateCreator202405ProfilesGetRequest) (*affiliate_creator_v202405.AffiliateCreator202405GetCreatorProfileResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405GetCreatorProfileResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405ProfilesGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/profiles"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202405ShowcasesProductsAddPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    xTtsAccessToken *string
    contentType *string
    affiliateCreator202405AddShowcaseProductsRequestBody *affiliate_creator_v202405.AffiliateCreator202405AddShowcaseProductsRequestBody
}

// 
func (r ApiAffiliateCreator202405ShowcasesProductsAddPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405ShowcasesProductsAddPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405ShowcasesProductsAddPostRequest) ContentType(contentType string) ApiAffiliateCreator202405ShowcasesProductsAddPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliateCreator202405ShowcasesProductsAddPostRequest) AffiliateCreator202405AddShowcaseProductsRequestBody(affiliateCreator202405AddShowcaseProductsRequestBody affiliate_creator_v202405.AffiliateCreator202405AddShowcaseProductsRequestBody) ApiAffiliateCreator202405ShowcasesProductsAddPostRequest {
    r.affiliateCreator202405AddShowcaseProductsRequestBody = &affiliateCreator202405AddShowcaseProductsRequestBody
    return r
}
func (r ApiAffiliateCreator202405ShowcasesProductsAddPostRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405AddShowcaseProductsResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405ShowcasesProductsAddPostExecute(r)
}

/*
AffiliateCreator202405ShowcasesProductsAddPost AddShowcaseProducts
This API adds the products to the creator's showcase. The platform will return the add status of the products, and error code and error message if the deletion fails.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405ShowcasesProductsAddPostRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ShowcasesProductsAddPost(ctx context.Context) ApiAffiliateCreator202405ShowcasesProductsAddPostRequest {
    return ApiAffiliateCreator202405ShowcasesProductsAddPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405AddShowcaseProductsResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ShowcasesProductsAddPostExecute(r ApiAffiliateCreator202405ShowcasesProductsAddPostRequest) (*affiliate_creator_v202405.AffiliateCreator202405AddShowcaseProductsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405AddShowcaseProductsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405ShowcasesProductsAddPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/showcases/products/add"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202405AddShowcaseProductsRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202405ShowcasesProductsGetRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    pageSize *int64
    origin *string
    xTtsAccessToken *string
    contentType *string
    pageToken *string
}

// The number of results to be returned per page. Valid range: [1-20].
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) PageSize(pageSize int64) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    r.pageSize = &pageSize
    return r
}
// Set to &#x60;LIVE&#x60; to indicate the request originates from a Live room. Set to &#x60;SHOWCASE&#x60; to indicate that the request originates from the Showcase.
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) Origin(origin string) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    r.origin = &origin
    return r
}
// 
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) ContentType(contentType string) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    r.contentType = &contentType
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the next_page_token from a previous response. It is not needed for the first page.
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) PageToken(pageToken string) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    r.pageToken = &pageToken
    return r
}
func (r ApiAffiliateCreator202405ShowcasesProductsGetRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405GetShowcaseProductsResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405ShowcasesProductsGetExecute(r)
}

/*
AffiliateCreator202405ShowcasesProductsGet GetShowcaseProducts
This API lists the products in the creator's showcase, paginated by specified page size and iterated through pages by page token for up to 2000 products in the showcase. This API is generally used when a creator would like to view the products in the showcase.  The platform will return the product details in the showcase, as well as the products in the livebag if the creator is live streaming.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405ShowcasesProductsGetRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ShowcasesProductsGet(ctx context.Context) ApiAffiliateCreator202405ShowcasesProductsGetRequest {
    return ApiAffiliateCreator202405ShowcasesProductsGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405GetShowcaseProductsResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405ShowcasesProductsGetExecute(r ApiAffiliateCreator202405ShowcasesProductsGetRequest) (*affiliate_creator_v202405.AffiliateCreator202405GetShowcaseProductsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405GetShowcaseProductsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405ShowcasesProductsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/showcases/products"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.origin == nil {
        return localVarReturnValue, nil, reportError("origin is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    parameterAddToHeaderOrQuery(localVarQueryParams, "origin", r.origin, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest struct {
    ctx context.Context
    ApiService *AffiliateCreatorV202405APIService
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    affiliateCreator202405SearchCreatorTargetCollaborationsRequestBody *affiliate_creator_v202405.AffiliateCreator202405SearchCreatorTargetCollaborationsRequestBody
}

// The number of results to be returned per page. Valid range: [0-100].
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) PageSize(pageSize int64) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) ContentType(contentType string) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    r.contentType = &contentType
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the next_page_token from a previous response. It is not needed for the first page.
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) PageToken(pageToken string) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    r.pageToken = &pageToken
    return r
}
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) AffiliateCreator202405SearchCreatorTargetCollaborationsRequestBody(affiliateCreator202405SearchCreatorTargetCollaborationsRequestBody affiliate_creator_v202405.AffiliateCreator202405SearchCreatorTargetCollaborationsRequestBody) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    r.affiliateCreator202405SearchCreatorTargetCollaborationsRequestBody = &affiliateCreator202405SearchCreatorTargetCollaborationsRequestBody
    return r
}
func (r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) Execute() (*affiliate_creator_v202405.AffiliateCreator202405SearchCreatorTargetCollaborationsResponse, *http.Response, error) {
    return r.ApiService.AffiliateCreator202405TargetCollaborationsSearchPostExecute(r)
}

/*
AffiliateCreator202405TargetCollaborationsSearchPost SearchCreatorTargetCollaborations
This API is used to search for creator's target collaborations and the products within these target collaborations.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest
*/
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405TargetCollaborationsSearchPost(ctx context.Context) ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest {
    return ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliateCreator202405SearchCreatorTargetCollaborationsResponse
func (a *AffiliateCreatorV202405APIService) AffiliateCreator202405TargetCollaborationsSearchPostExecute(r ApiAffiliateCreator202405TargetCollaborationsSearchPostRequest) (*affiliate_creator_v202405.AffiliateCreator202405SearchCreatorTargetCollaborationsResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_creator_v202405.AffiliateCreator202405SearchCreatorTargetCollaborationsResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliateCreatorV202405APIService.AffiliateCreator202405TargetCollaborationsSearchPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_creator/202405/target_collaborations/search"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliateCreator202405SearchCreatorTargetCollaborationsRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
