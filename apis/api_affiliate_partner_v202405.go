/*
tiktok shop openapi

sdk for apis

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apis

import (
    "bytes"
    "context"
    "io"
    "net/http"
    "net/url"
    "strings"

    "github.com/Yuttachai-101/api_tiktok/models/affiliate_partner/v202405"
)


// AffiliatePartnerV202405APIService AffiliatePartnerV202405API service
type AffiliatePartnerV202405APIService service

type ApiAffiliatePartner202405CampaignsCampaignIdGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdGetRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdGetRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdGetRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdGetRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdGetRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdGetExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdGet GetAffiliatePartnerCampaignDetail
This API offers the ability to get affiliate campaign details.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The ID of the campaign.
@return ApiAffiliatePartner202405CampaignsCampaignIdGetRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdGet(ctx context.Context, campaignId string) ApiAffiliatePartner202405CampaignsCampaignIdGetRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdGetExecute(r ApiAffiliatePartner202405CampaignsCampaignIdGetRequest) (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
    affiliatePartner202405EditAffiliatePartnerCampaignRequestBody *affiliate_partner_v202405.AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody
}

// The partner identifier used in API requests.  Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody(affiliatePartner202405EditAffiliatePartnerCampaignRequestBody affiliate_partner_v202405.AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody) ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest {
    r.affiliatePartner202405EditAffiliatePartnerCampaignRequestBody = &affiliatePartner202405EditAffiliatePartnerCampaignRequestBody
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405EditAffiliatePartnerCampaignResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdPartialEditPostExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdPartialEditPost EditAffiliatePartnerCampaign
 This API offers the ability to edit an Affiliate Partner campaign. No editing after the campaign is closed.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The ID of the campaign.
@return ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdPartialEditPost(ctx context.Context, campaignId string) ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405EditAffiliatePartnerCampaignResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdPartialEditPostExecute(r ApiAffiliatePartner202405CampaignsCampaignIdPartialEditPostRequest) (*affiliate_partner_v202405.AffiliatePartner202405EditAffiliatePartnerCampaignResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405EditAffiliatePartnerCampaignResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdPartialEditPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}/partial_edit"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliatePartner202405EditAffiliatePartnerCampaignRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    categoryAssetCipher *string
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    reviewStatus *string
    productName *string
    productId *string
    shopName *string
    categoryId *string
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// The number of results to be returned per page.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) PageSize(pageSize int64) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.contentType = &contentType
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) PageToken(pageToken string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.pageToken = &pageToken
    return r
}
// The product review status. This an enumerated type with values: - PENDING - APPROVED - REJECTED - PENDING_CLOSED - CLOSED
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) ReviewStatus(reviewStatus string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.reviewStatus = &reviewStatus
    return r
}
// Filter the product list by product name. If value of &#x60;product_name&#x60; is contained in &#x60;product.name&#x60;, the product will be included in the response.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) ProductName(productName string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.productName = &productName
    return r
}
// Filter the product list by product ID. If value of &#x60;product_id&#x60; matches &#x60;product.id&#x60;, the product will be included in the response.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) ProductId(productId string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.productId = &productId
    return r
}
// Filter the product list by shop name. If value of &#x60;shop_name&#x60; is contained in &#x60;product.shop_name&#x60;, the product will be included in the response.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) ShopName(shopName string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.shopName = &shopName
    return r
}
// Filter the product list by category ID. If value of &#x60;category_id&#x60; matches &#x60;product.category.id&#x60;, or the product falls into the leaf category of the specified category, the product will be included in the response.
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) CategoryId(categoryId string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    r.categoryId = &categoryId
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdProductsGetExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdProductsGet GetAffiliatePartnerCampaignProductList
This API offers the ability to list products submitted by sellers in an Affiliate Partner campaign.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The ID of the campaign.
@return ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsGet(ctx context.Context, campaignId string) ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsGetExecute(r ApiAffiliatePartner202405CampaignsCampaignIdProductsGetRequest) (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdProductsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}/products"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.reviewStatus != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "review_status", r.reviewStatus, "")
    }
    if r.productName != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "product_name", r.productName, "")
    }
    if r.productId != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "product_id", r.productId, "")
    }
    if r.shopName != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "shop_name", r.shopName, "")
    }
    if r.categoryId != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "category_id", r.categoryId, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    productId string
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
    affiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody *affiliate_partner_v202405.AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody(affiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody affiliate_partner_v202405.AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest {
    r.affiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody = &affiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost GenerateAffiliatePartnerCampaignProductLink
This API offers the ability to generate campaign product promotion links.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The ID of the campaign.
@param productId The ID of the product.
@return ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost(ctx context.Context, campaignId string, productId string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
        productId: productId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostExecute(r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePostRequest) (*affiliate_partner_v202405.AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}/products/{product_id}/promotion_link/generate"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    productId string
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
    affiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody *affiliate_partner_v202405.AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody(affiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody affiliate_partner_v202405.AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest {
    r.affiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody = &affiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPost ReviewAffiliatePartnerCampaignProduct
This API offers the ability for the TikTok Affiliate Partner to review the products submitted by the sellers. This API offers the ability for the TikTok Affiliate Partner to review the products submitted by the sellers.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The campaign identifier.
@param productId The product identifier.
@return ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPost(ctx context.Context, campaignId string, productId string) ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
        productId: productId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostExecute(r ApiAffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPostRequest) (*affiliate_partner_v202405.AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdProductsProductIdReviewPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}/products/{product_id}/review"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
    localVarPath = strings.Replace(localVarPath, "{"+"product_id"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    campaignId string
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405PublishAffiliatePartnerCampaignResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsCampaignIdPublishPostExecute(r)
}

/*
AffiliatePartner202405CampaignsCampaignIdPublishPost PublishAffiliatePartnerCampaign
This API offers the ability to publish an Affiliate Partner campaign. The campaign will be displayed to sellers after publishing.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@param campaignId The campaign identifier.
@return ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdPublishPost(ctx context.Context, campaignId string) ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest {
    return ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest{
        ApiService: a,
        ctx: ctx,
        campaignId: campaignId,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405PublishAffiliatePartnerCampaignResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsCampaignIdPublishPostExecute(r ApiAffiliatePartner202405CampaignsCampaignIdPublishPostRequest) (*affiliate_partner_v202405.AffiliatePartner202405PublishAffiliatePartnerCampaignResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405PublishAffiliatePartnerCampaignResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsCampaignIdPublishPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns/{campaign_id}/publish"
    localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsGetRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    categoryAssetCipher *string
    pageSize *int64
    xTtsAccessToken *string
    contentType *string
    pageToken *string
    status *string
    type_ *string
    queryTypeFilter *string
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
func (r ApiAffiliatePartner202405CampaignsGetRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// The number of results to be returned per page. Default: 10. Valid range: [1-100]. 
func (r ApiAffiliatePartner202405CampaignsGetRequest) PageSize(pageSize int64) ApiAffiliatePartner202405CampaignsGetRequest {
    r.pageSize = &pageSize
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsGetRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsGetRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.contentType = &contentType
    return r
}
// An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. Maximum page size is &#x60;100&#x60; items.
func (r ApiAffiliatePartner202405CampaignsGetRequest) PageToken(pageToken string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.pageToken = &pageToken
    return r
}
// The campaign status. The status is an enumerated type with values: - READY - UPCOMING - ONGOING - CLOSED
func (r ApiAffiliatePartner202405CampaignsGetRequest) Status(status string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.status = &status
    return r
}
// The campaign type. This is an enumerated type with values:  - MY_CAMPAIGNS - GS_SELLING_CAMPAIGNS  - SELLER_CAMPAIGNS - EXCLUSIVE_TIKTOK_SHOP   Default value is MY_CAMPAIGNS.
func (r ApiAffiliatePartner202405CampaignsGetRequest) Type_(type_ string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.type_ = &type_
    return r
}
// An extended filter to be used when the campaign type property type is set to SELLER_CAMPAIGNS or EXCLUSIVE_TIKTOK_SHOP.  If the type property is set to SELLER_CAMPAIGNS, the valid values for this property are:  - MARKETPLACE: the response includes campaigns that the partner did not join. - JOINED :  the response includes campaigns the partner has joined only. If the type property is set to EXCLUSIVE_TIKTOK_SHOP, the valid values for this property are: - AVAILABLE: the response includes campaigns the partner is permitted to join. - JOINED: the response includes campaigns the partner has joined only. Other types can either not pass a value or pass in Default.
func (r ApiAffiliatePartner202405CampaignsGetRequest) QueryTypeFilter(queryTypeFilter string) ApiAffiliatePartner202405CampaignsGetRequest {
    r.queryTypeFilter = &queryTypeFilter
    return r
}
func (r ApiAffiliatePartner202405CampaignsGetRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignListResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsGetExecute(r)
}

/*
AffiliatePartner202405CampaignsGet GetAffiliatePartnerCampaignList
This API offers the ability to list campaigns created by the Affiliate Partner.

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliatePartner202405CampaignsGetRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsGet(ctx context.Context) ApiAffiliatePartner202405CampaignsGetRequest {
    return ApiAffiliatePartner202405CampaignsGetRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405GetAffiliatePartnerCampaignListResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsGetExecute(r ApiAffiliatePartner202405CampaignsGetRequest) (*affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignListResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodGet
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405GetAffiliatePartnerCampaignListResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsGet")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.pageSize == nil {
        return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
    if r.pageToken != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "page_token", r.pageToken, "")
    }
    if r.status != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
    }
    if r.type_ != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
    }
    if r.queryTypeFilter != nil {
    parameterAddToHeaderOrQuery(localVarQueryParams, "query_type_filter", r.queryTypeFilter, "")
    }
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAffiliatePartner202405CampaignsPostRequest struct {
    ctx context.Context
    ApiService *AffiliatePartnerV202405APIService
    categoryAssetCipher *string
    xTtsAccessToken *string
    contentType *string
    affiliatePartner202405CreateAffiliatePartnerCampaignRequestBody *affiliate_partner_v202405.AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody
}

// The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995).  
func (r ApiAffiliatePartner202405CampaignsPostRequest) CategoryAssetCipher(categoryAssetCipher string) ApiAffiliatePartner202405CampaignsPostRequest {
    r.categoryAssetCipher = &categoryAssetCipher
    return r
}
// 
func (r ApiAffiliatePartner202405CampaignsPostRequest) XTtsAccessToken(xTtsAccessToken string) ApiAffiliatePartner202405CampaignsPostRequest {
    r.xTtsAccessToken = &xTtsAccessToken
    return r
}
// Allowed type: application/json
func (r ApiAffiliatePartner202405CampaignsPostRequest) ContentType(contentType string) ApiAffiliatePartner202405CampaignsPostRequest {
    r.contentType = &contentType
    return r
}
func (r ApiAffiliatePartner202405CampaignsPostRequest) AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody(affiliatePartner202405CreateAffiliatePartnerCampaignRequestBody affiliate_partner_v202405.AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody) ApiAffiliatePartner202405CampaignsPostRequest {
    r.affiliatePartner202405CreateAffiliatePartnerCampaignRequestBody = &affiliatePartner202405CreateAffiliatePartnerCampaignRequestBody
    return r
}
func (r ApiAffiliatePartner202405CampaignsPostRequest) Execute() (*affiliate_partner_v202405.AffiliatePartner202405CreateAffiliatePartnerCampaignResponse, *http.Response, error) {
    return r.ApiService.AffiliatePartner202405CampaignsPostExecute(r)
}

/*
AffiliatePartner202405CampaignsPost CreateAffiliatePartnerCampaign
This API offers the ability to create a campaign for targeted sellers/public sellers, including campaign period, campaign registration period and commission requirements. Note: The campaign will not be displayed to sellers after creation

@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return ApiAffiliatePartner202405CampaignsPostRequest
*/
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsPost(ctx context.Context) ApiAffiliatePartner202405CampaignsPostRequest {
    return ApiAffiliatePartner202405CampaignsPostRequest{
        ApiService: a,
        ctx: ctx,
    }
}

// Execute executes the request
//  @return AffiliatePartner202405CreateAffiliatePartnerCampaignResponse
func (a *AffiliatePartnerV202405APIService) AffiliatePartner202405CampaignsPostExecute(r ApiAffiliatePartner202405CampaignsPostRequest) (*affiliate_partner_v202405.AffiliatePartner202405CreateAffiliatePartnerCampaignResponse, *http.Response, error) {
    var (
        localVarHTTPMethod   = http.MethodPost
        localVarPostBody     interface{}
        formFiles            []formFile
        localVarReturnValue  *affiliate_partner_v202405.AffiliatePartner202405CreateAffiliatePartnerCampaignResponse
    )

    localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AffiliatePartnerV202405APIService.AffiliatePartner202405CampaignsPost")
    if err != nil {
        return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
    }

    localVarPath := localBasePath + "/affiliate_partner/202405/campaigns"

    localVarHeaderParams := make(map[string]string)
    localVarQueryParams := url.Values{}
    localVarFormParams := url.Values{}
    if r.categoryAssetCipher == nil {
        return localVarReturnValue, nil, reportError("categoryAssetCipher is required and must be specified")
    }
    if r.xTtsAccessToken == nil {
        return localVarReturnValue, nil, reportError("xTtsAccessToken is required and must be specified")
    }
    if r.contentType == nil {
        return localVarReturnValue, nil, reportError("contentType is required and must be specified")
    }

    parameterAddToHeaderOrQuery(localVarQueryParams, "category_asset_cipher", r.categoryAssetCipher, "")
    // to determine the Content-Type header
    localVarHTTPContentTypes := []string{"application/json"}

    // set Content-Type header
    localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
    if localVarHTTPContentType != "" {
        localVarHeaderParams["Content-Type"] = localVarHTTPContentType
    }

    // to determine the Accept header
    localVarHTTPHeaderAccepts := []string{"application/json"}

    // set Accept header
    localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
    if localVarHTTPHeaderAccept != "" {
        localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
    }
    parameterAddToHeaderOrQuery(localVarHeaderParams, "x-tts-access-token", r.xTtsAccessToken, "")
    parameterAddToHeaderOrQuery(localVarHeaderParams, "Content-Type", r.contentType, "")
    // body params
    localVarPostBody = r.affiliatePartner202405CreateAffiliatePartnerCampaignRequestBody
    req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
    if err != nil {
        return localVarReturnValue, nil, err
    }

    localVarHTTPResponse, err := a.client.callAPI(req)
    if err != nil || localVarHTTPResponse == nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    localVarHTTPResponse.Body.Close()
    localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
    if err != nil {
        return localVarReturnValue, localVarHTTPResponse, err
    }

    if localVarHTTPResponse.StatusCode >= 300 {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: localVarHTTPResponse.Status,
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr := &GenericOpenAPIError{
            body:  localVarBody,
            error: err.Error(),
        }
        return localVarReturnValue, localVarHTTPResponse, newErr
    }

    return localVarReturnValue, localVarHTTPResponse, nil
}
